class Queue [

private static int front, rear, capacity: private static int queue[]:

Queue(int size) { front rear = 0; capacity = size; queue = new int[capacity]: 1

static void queue Enqueue(int item) if (capacity rear) { System.out.printf("\nQueue is full\n"); return;

else

{ queue[rear] = item; rear++;

return;

static void queueDequeue()

if (front == rear)

{

1

:

System.out.printf("\nQueue is empty\n");

return;

else

for (int i=0; i < rear-1; i++)

queue[i] = queue[i + 1];

if (rear capacity) queue[rear] = 0; rear-

return;

static void queueDisplay()

1

int i;

if (front == rear)

System.out.printf("Queue is Empty\n"); return;

for (i=front; i < rear; i++)

System.out.printf("%d", queue[i]);

return;

1 static void queue Front()
{

if (front == rear)

System.out.printf("Queue is Empty\n"); return;

}

System.out.printf("\nFront Element of the queue: %d", queue[front]); return;

public class Main

{

public static void main(String[] args)

{

}

E System.out.printf("\nQueue after two dequeue operations:");

Queue q = new Queue(4);

System.out.println("Initial Queue:");

q.queueDisplay();

q.queue Enqueue(10);

q.queueEnqueue(30);

q.queue Enqueue(50);

q.queueEnqueue(70);

System.out.println("Queue after Enqueue Operation:");

q.queue Display();

q.queueFront();

q.queue Enqueue(90);

q.queueDisplay();

q.queue Dequeue();

q.queue Dequeue();

q.queue Display();

q.queueFront();

}

}
